# Control: 2.1.3 Ensure notifications for internal users sending malware is enabled (L1)
# Requires: Exchange Online (Malware Filter Policy cmdlets)
function Get-CISM365Control_2_1_3 {
    [OutputType([hashtable])]
    param()
    @{
        Id          = '2.1.3'
        Name        = 'Ensure notifications for internal users sending malware is enabled'
        Profile     = 'L1'
        Automated   = $true
        Services    = @('Exchange')
        Description = 'Verify that the default anti-malware policy in Exchange Online Protection (EOP) has internal sender admin notifications enabled and at least one admin email address configured.'
        Rationale   = 'This setting alerts administrators when an internal user sends a message containing malware, which may indicate account or device compromise.'
        References  = @(
            'https://learn.microsoft.com/powershell/module/exchange/get-malwarefilterpolicy',
            'https://learn.microsoft.com/microsoft-365/security/office-365-security/configure-anti-malware-policies',
            'https://security.microsoft.com'
        )
        Audit = {
            try {
                # Ensure required cmdlet exists
                if (-not (Get-Command -Name Get-MalwareFilterPolicy -ErrorAction SilentlyContinue)) {
                    return 'MANUAL: Get-MalwareFilterPolicy cmdlet not available. Connect to Exchange Online (Connect-ExchangeOnline).'
                }

                $policy = Get-MalwareFilterPolicy -ErrorAction SilentlyContinue | Where-Object { $_.Identity -eq 'Default' }

                if (-not $policy) {
                    return 'FAIL: Default anti-malware policy not found.'
                }

                $enabled = $policy.EnableInternalSenderAdminNotifications
                $emails  = $policy.InternalSenderAdminAddress

                if ($enabled -and $emails -and $emails.Count -gt 0) {
                    return "PASS: Internal sender admin notifications are enabled. Admins: $($emails -join ', ')"
                }

                $reasons = @()
                if (-not $enabled) { $reasons += 'notifications disabled' }
                if (-not $emails -or $emails.Count -eq 0) { $reasons += 'no admin email addresses configured' }

                return "FAIL: $($reasons -join '; ')"
            } catch {
                return "ERROR: $($_.Exception.Message)"
            }
        }
    }
}
