# Private/Controls/Control-1.3.6.ps1
function Get-CISM365Control_1_3_6 { [OutputType([hashtable])] param() @{ Id='1.3.6'; Name='Ensure the customer lockbox feature is enabled'; Profile='L2'; Automated=$true; Services=@('Exchange','AdminCenter','SecureScore'); Description='Customer Lockbox provides an approval workflow for Microsoft support to access customer data; verify CustomerLockBoxEnabled.'; Rationale='Enabling Customer Lockbox protects against unapproved access and provides an audit trail for compliance.'; References=@('https://learn.microsoft.com/en-us/azure/security/fundamentals/customer-lockbox-overview','https://docs.microsoft.com/powershell/module/exchange/get-organizationconfig'); Audit={ try { try { if (-not (Get-Command -Name Get-CurrentTenant -ErrorAction SilentlyContinue)) { $scriptDir = Split-Path -Parent $MyInvocation.MyCommand.Path; $candidate = Join-Path $scriptDir '..\..\Helpers\Get-CurrentTenant.ps1'; $resolved = Resolve-Path -Path $candidate -ErrorAction SilentlyContinue; if ($resolved) { . $resolved.ProviderPath } } } catch {}; if (-not (Get-Command -Name Get-OrganizationConfig -ErrorAction SilentlyContinue)) { $alt = "MANUAL: Exchange Online cmdlets not available in this session. Verify via admin center (Settings → Org settings → Security & privacy → Customer lockbox) or SecureScore."; $alt += "`nAlternate steps: Connect-ExchangeOnline; Get-OrganizationConfig | Select-Object CustomerLockBoxEnabled"; return $alt } try { $org = Get-OrganizationConfig -ErrorAction Stop } catch { return "MANUAL: Unable to run Get-OrganizationConfig (authentication/session issue or cmdlet error): $($_.Exception.Message)" } if ($null -eq $org) { return 'MANUAL: Get-OrganizationConfig returned no data; unable to determine CustomerLockBoxEnabled.' } $enabled = $null; if ($org.PSObject.Properties.Name -contains 'CustomerLockBoxEnabled') { $enabled = $org.CustomerLockBoxEnabled } elseif ($org.PSObject.Properties.Name -contains 'CustomerLockboxEnabled') { $enabled = $org.CustomerLockboxEnabled } if ($null -eq $enabled) { return 'MANUAL: CustomerLockBoxEnabled property not present; verify in admin UI or SecureScore/Graph.' } if ($enabled -eq $true) { return 'PASS: Customer Lockbox is enabled (CustomerLockBoxEnabled = True).' } else { return "FAIL: Customer Lockbox is disabled (CustomerLockBoxEnabled = $enabled). Enable via Set-OrganizationConfig -CustomerLockBoxEnabled \$true or admin center." } } catch { return "ERROR: $($_.Exception.Message)" } } }
}